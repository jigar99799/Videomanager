#include "RandomGenerator.h"
#include "JSONUtils.h"
#include "XMLUtils.h"

#include <thread>
#include <chrono>
#include <random>

// Define the size of the array globally for simplicity
constexpr int arraySize = 10;
const std::chrono::minutes RUN_DURATION(1);
std::chrono::steady_clock::time_point start_time;

void createJSON(const input& in) {
    std::string jsonString = JSONUtils::CreateJSON(in);
    std::cout << "Generated JSON: \n" << jsonString << std::endl;
}

void createXML(const input& in) {
    std::string xmlString = XMLUtils::CreateXML(in);
    std::cout << "Generated XML: \n" << xmlString << std::endl;
}

void printStructure(input &generatedInput){
    std::cout << "Device Name: " << generatedInput.sDeviceName << "\n";
    std::cout << "Source Type: " << static_cast<int>(generatedInput.stmediadata.esourceType) << "\n";
    std::cout << "Video Codec: " << static_cast<int>(generatedInput.stmediadata.stMediaCodec.evideocodec) << "\n";
    std::cout << "Audio Codec: " << static_cast<int>(generatedInput.stmediadata.stMediaCodec.eaudiocodec) << "\n";
    std::cout << "Audio Sample Rate: " << static_cast<int>(generatedInput.stmediadata.stMediaCodec.eaudioSampleRate) << "\n";
    std::cout << "Container Format: " << static_cast<int>(generatedInput.stmediadata.stFileSource.econtainerFormat) << "\n";
    std::cout << "Streaming Protocol: " << static_cast<int>(generatedInput.stmediadata.stNetworkStreaming.estreamingProtocol) << "\n";
    std::cout << "IP Address: " << generatedInput.stmediadata.stNetworkStreaming.sIpAddress << "\n";
    std::cout << "Port: " << generatedInput.stmediadata.stNetworkStreaming.iPort << "\n";
    std::cout << "Streaming Type: " << static_cast<int>(generatedInput.stmediadata.estreamingType) << "\n";
    std::cout << "Action: " << static_cast<int>(generatedInput.stmediadata.eaction) << "\n";
    std::cout << "-------------------------------\n";
}
int main() {
    srand(static_cast<unsigned>(time(0))); // Seed the random number generator


    // Create a thread to handle the task
    std::thread taskThread([](){
        start_time = std::chrono::steady_clock::now();
        while (std::chrono::steady_clock::now() - start_time < RUN_DURATION) {
            // Sleep for 10 milliseconds
            std::this_thread::sleep_for(std::chrono::seconds(10));

            // Generate a random input structure
            input generatedInput = RandomGenerator::generateRandomInput(rand() % arraySize);

            // Generate a random value between 0 and 1 to choose between XML or JSON
            int choice = rand() % 2;

            // Based on the random choice, create either XML or JSON
            if (choice == 0) {
                createXML(generatedInput);
            } else {
                createJSON(generatedInput);
            }

            printStructure(generatedInput);

        }
    });

    // Join the thread to make sure it completes before exiting
    taskThread.join();

    return 0;
}
